package ai.julie.core.model.chatcompletionresponse

// Note: Reusing MessageContent definitions from the request model for content parts
// Might need adjustments if response content structure differs significantly.

/**
 * Represents the log probability information for a token.
 */
data class TopLogprob(
    /** The token string. */
    val token: String,
    /** The log probability of this token. */
    val logprob: Double,
    /** A list of integers representing the UTF-8 bytes representation of the token. Can be null. */
    val bytes: List<Int>? = null
)

/**
 * Represents log probability information for a specific message content token.
 */
data class LogprobInfo(
    /** The token string. */
    val token: String,
    /** The log probability of this token. */
    val logprob: Double,
    /** A list of integers representing the UTF-8 bytes representation of the token. Can be null. */
    val bytes: List<Int>? = null,
    /** List of the most likely tokens and their log probability, at this token position. */
    val topLogprobs: List<TopLogprob>
)

/**
 * Log probability information for the choice.
 */
data class Logprobs(
    /** A list of message content tokens with log probability information. Can be null. */
    val content: List<LogprobInfo>? = null,
    /** A list of message refusal tokens with log probability information. Can be null. */
    val refusal: List<LogprobInfo>? = null
)

/**
 * Represents the function called by the model within a tool call.
 */
data class FunctionCall(
    /** The name of the function to call. */
    val name: String,
    /** The arguments to call the function with, as generated by the model in JSON format string. */
    val arguments: String
)

/**
 * Represents a tool call generated by the model, such as a function call.
 */
data class ToolCall(
    /** The ID of the tool call. */
    val id: String,
    /** The type of the tool. Currently, only "function" is supported. */
    val type: String, // Typically "function"
    /** The function that the model called. */
    val function: FunctionCall
)

/**
 * Represents the deprecated function call object returned by the model.
 */
@Deprecated("Replaced by tool_calls")
data class DeprecatedFunctionCall(
    /** The name of the function that should be called. */
    val name: String,
    /** The arguments to call the function with, as generated by the model in JSON format string. */
    val arguments: String
)

/**
 * Placeholder for annotation structure. Define based on actual usage (e.g., web search annotations).
 */
data class Annotation(
    // Define fields based on annotation type, e.g., for web_search
    val type: String, // Example field
    val details: Map<String, Any>? = null // Example field
)

/**
 * Placeholder for audio response info structure.
 */
data class AudioResponseInfo(
    // Define fields based on actual audio response data
    val id: String, // Example based on AssistantMessage request structure
    val format: String? = null // Example
    // ... other fields as needed
)

/**
 * Represents a chat completion message generated by the model in the response.
 */
data class ResponseMessage(
    /** The role of the author of this message (e.g., "assistant"). */
    val role: String,
    /** The contents of the message. Can be null if tool calls or refusal are present. */
    val content: String? = null, // API spec says string or null for response message content
    /** The refusal message generated by the model. */
    val refusal: String? = null,
    /** Annotations for the message, when applicable. */
    val annotations: List<Annotation>? = null,
    /** Information about the generated audio, if requested. */
    val audio: AudioResponseInfo? = null,
    /** The tool calls generated by the model, such as function calls. */
    val toolCalls: List<ToolCall>? = null,
    /** Deprecated: The name and arguments of a function that should be called. */
    @Deprecated("Replaced by tool_calls")
    val functionCall: DeprecatedFunctionCall? = null
)

/**
 * Represents a single chat completion choice.
 */
data class Choice(
    /** The reason the model stopped generating tokens. */
    val finishReason: String,
    /** The index of the choice in the list of choices. */
    val index: Int,
    /** A chat completion message generated by the model. */
    val message: ResponseMessage,
    /** Log probability information for the choice. Can be null. */
    val logprobs: Logprobs? = null
)

/**
 * Represents the breakdown of tokens used in the completion part of the response.
 */
data class CompletionTokensDetails(
    /** Number of tokens in the prediction that appeared in the completion (Predicted Outputs). */
    val acceptedPredictionTokens: Int? = null,
    /** Audio input tokens generated by the model. */
    val audioTokens: Int? = null,
    /** Tokens generated by the model for reasoning. */
    val reasoningTokens: Int? = null,
    /** Number of tokens in the prediction that did not appear in the completion (Predicted Outputs). */
    val rejectedPredictionTokens: Int? = null
)

/**
 * Represents the breakdown of tokens used in the prompt part of the request.
 */
data class PromptTokensDetails(
    /** Audio input tokens present in the prompt. */
    val audioTokens: Int? = null,
    /** Cached tokens present in the prompt. */
    val cachedTokens: Int? = null
)

/**
 * Usage statistics for the completion request.
 */
data class Usage(
    /** Number of tokens in the generated completion. */
    val completionTokens: Int,
    /** Number of tokens in the prompt. */
    val promptTokens: Int,
    /** Total number of tokens used in the request (prompt + completion). */
    val totalTokens: Int,
    /** Breakdown of tokens used in the completion. */
    val completionTokensDetails: CompletionTokensDetails? = null,
    /** Breakdown of tokens used in the prompt. */
    val promptTokensDetails: PromptTokensDetails? = null
)

/**
 * Represents a chat completion response returned by the model.
 */
data class ChatCompletion(
    /** A unique identifier for the chat completion. */
    val id: String,
    /** A list of chat completion choices. */
    val choices: List<Choice>,
    /** The Unix timestamp (in seconds) of when the chat completion was created. */
    val created: Int,
    /** The model used for the chat completion. */
    val model: String,
    /** The object type, which is always "chat.completion". */
    val objectType: String, // Renamed from 'object' to avoid Kotlin keyword clash
    /** The service tier used for processing the request. Can be null. */
    val serviceTier: String? = null,
    /** This fingerprint represents the backend configuration that the model runs with. */
    val systemFingerprint: String? = null, // Marked as optional as it might not always be present
    /** Usage statistics for the completion request. Can be null if streaming is interrupted. */
    val usage: Usage? = null
) 