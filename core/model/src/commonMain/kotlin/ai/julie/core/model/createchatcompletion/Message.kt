package ai.julie.core.model.createchatcompletion

// --- Content Part Definitions ---

/** Represents the URL structure within an Image content part. */
data class ImageUrl(
    /** Required. Either a URL of the image or the base64 encoded image data. */
    val url: String,
    /** Optional. Defaults to "auto". Specifies the detail level ("low", "high", "auto"). */
    val detail: String? = "auto"
)

/** Represents the input audio structure within an Audio content part. */
data class InputAudio(
    /** Required. Base64 encoded audio data. */
    val data: String,
    /** Required. The format of the encoded audio data (e.g., "wav", "mp3"). */
    val format: String
)

/** Represents the file structure within a File content part. */
data class FileData(
    /** Optional. The base64 encoded file data. */
    val fileData: String? = null,
    /** Optional. The ID of an uploaded file to use as input. */
    val fileId: String? = null,
    /** Optional. The name of the file. */
    val filename: String? = null
)

/**
 * Represents a part of the content within a message, supporting different modalities.
 */
sealed class ContentPart(open val type: String)

data class TextContentPart(
    /** Required. The text content. */
    val text: String
) : ContentPart("text")

data class ImageContentPart(
    /** Required. Contains the URL or base64 data and detail level. */
    val imageUrl: ImageUrl
) : ContentPart("image_url") // Note: API spec uses 'image_url' as the type here

data class AudioContentPart(
    /** Required. Contains the base64 data and format. */
    val inputAudio: InputAudio
) : ContentPart("input_audio")

data class FileContentPart(
    /** Required. Contains file details (data, ID, or name). */
    val file: FileData
) : ContentPart("file")

data class RefusalContentPart(
    /** Required. The refusal message generated by the model. */
    val refusal: String
) : ContentPart("refusal")

// --- Message Content Definition ---

/**
 * Represents the content of a message, which can be simple text or a list of structured parts.
 */
sealed class MessageContent {
    /** Represents content as a simple string. */
    data class Text(val value: String) : MessageContent()

    /** Represents content as a list of different parts (text, image, audio, file, refusal). */
    data class Parts(val value: List<ContentPart>) : MessageContent()
}

// --- Message Definitions ---

/**
 * Base sealed class for different types of messages in a chat conversation.
 */
sealed class Message(
    open val role: String,
    open val name: String? = null
)

/**
 * Developer-provided instructions that the model should follow.
 * Replaces system messages for o1 models and newer.
 */
data class DeveloperMessage(
    /** Required. The contents of the developer message. */
    val content: MessageContent,
    /** Optional. An optional name for the participant. */
    override val name: String? = null
) : Message(role = "developer", name = name)

/**
 * System-provided instructions (Deprecated for o1+ models, use DeveloperMessage).
 */
data class SystemMessage(
    /** Required. The contents of the system message. */
    val content: MessageContent,
    /** Optional. An optional name for the participant. */
    override val name: String? = null
) : Message(role = "system", name = name)

/**
 * Messages sent by an end user.
 */
data class UserMessage(
    /** Required. The contents of the user message (can be text or mixed content parts). */
    val content: String, // TODO: add support for List
    /** Optional. An optional name for the participant. */
    override val name: String? = null
) : Message(role = "user", name = name)

/**
 * Represents data about a previous audio response from the assistant.
 */
data class AssistantAudio(
    /** Required. Unique identifier for a previous audio response from the model. */
    val id: String
)

/**
 * Messages sent by the model (assistant).
 */
data class AssistantMessage(
    /** Optional. Data about a previous audio response from the model. */
    val audio: AssistantAudio? = null,
    /** Optional. The contents of the assistant message. Required unless tool_calls or function_call is specified. */
    val content: MessageContent? = null,
    // NOTE: function_call and tool_calls are part of the *response* structure, not typically sent *in* the request 'messages'.
    // They might be included when resending conversation history, but are modeled separately in the response object.
    // We'll omit them here for the request body message structure.
    /** Optional. An optional name for the participant. */
    override val name: String? = null
) : Message(role = "assistant", name = name) 